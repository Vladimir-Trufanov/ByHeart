### [Как проверить плату Ардуино: поиск неисправностей](https://arduino-info.ru/kak-proverit-platu-arduino-poisk-neispravnostey/)

#### Проверка аппаратной части платы

Если Ардуино по каким-либо причинам не хочет работать, для начала стоит осмотреть плату по следующим признакам:

```
Качество пайки. Каждый элемент платы должен стоять на своем месте и быть припаян к дорожкам на плате.
Наличие прогаров, повреждений на дорожках платы или каких-либо элементах.
Наличие всех компонентов на плате. 
```

![Фото оригинального Arduino Uno на AtMega328P](foto-originalnogo-arduino-uno-na-atmega328p.png)

#### Проверка программной части

Проверили аппаратную часть, можем приступать к проверке программной. Подключаем плату к USB-порту компьютера и проверяем, светится ли зеленый светодиодный индикатор питания на плате.

Оранжевый светодиод рядом с центром платы (или зеленый) должен включаться и выключаться при запуске платы. Платы поставляются с завода, на котором предварительно установлено программное обеспечение, чтобы мигать светодиодом. Простая проверка того, что плата работает. Может быть не актуально для китайских реплик.2 6

Иногда плата не определяется компьютером. Это происходит с дешевыми репликами плат, на которых установлен UART преобразователь CH340g или иная модель. На оригинальных Ардуино или дорогих клонах стоит модель чипа FT232RL. При скачивании Arduino IDE, драйвер устанавливается автоматически. Для копий драйвер надо скачивать отдельно. 

Плата может не определяться, если повреждены информационные контакты USB-порта. Для проверки, надо осмотреть вход USB и его распайку на плате.

После запуска, пробуем загрузить скетч для проверки работоспособности пинов:

```
#define FIRST_PIN 0 // первый вывод
#define LAST_PIN 19 // последний вывод
void Test1(byte pin)
{
  if(pin < 10) Serial.print(" PIN:  ");
  else Serial.print(" PIN: ");
  Serial.print(pin);
  pinMode(pin, OUTPUT);
  digitalWrite(pin, 0);
  Serial.print("    LOW: ");
  if(!digitalRead(pin)) Serial.print("OK  ");
  else Serial.print("FAIL");
  digitalWrite(pin, 1);
  Serial.print("  HIGH: ");
  if(digitalRead(pin)) Serial.print("OK  ");
  else Serial.print("FAIL");
  pinMode(pin, INPUT);
  Serial.print("  PULL UP: ");
  if(digitalRead(pin)) Serial.print("OK  ");
  else Serial.print("FAIL");
  digitalWrite(pin, 0);
}

void Test2(byte pin)
{
  Serial.print("     ");
  pinMode(pin, OUTPUT);
  digitalWrite(pin, 1);
  delay(5);
  if(!digitalRead(pin))Serial.println("SHORT");
  else Serial.println("OK");
  pinMode(pin, INPUT);
  digitalWrite(pin, 0);
}

void setup() {
  Serial.begin(9600);
  Serial.println("Test of short circuit on GND or VCC and between pins:");
  Serial.println();
  for(byte i = FIRST_PIN; i <= LAST_PIN; i++)
  {
    for(byte j = FIRST_PIN; j <= LAST_PIN; j++)
    {
      pinMode(j, INPUT);
      digitalWrite(j, 0);
    }
    Test1(i);
    for(byte j = FIRST_PIN; j <= LAST_PIN; j++)
    {
      pinMode(j, OUTPUT);
      digitalWrite(j, 0);
    }
    Test2(i);
  }
  for(byte j = FIRST_PIN; j <= LAST_PIN; j++)
  {
    pinMode(j, INPUT);
    digitalWrite(j, 0);
  }
}

void loop() {}

```

После проверки, тест выдаст лог, в котором обозначит состояние выводов. На 0, 1 и 13 выводах могут быть выявлены неисправности — это нормально, так как 0 и 1 выводы заняты UART’ом (микросхема отвечающая за загрузку скетчей), а на 13 выводе светодиод. 

В остальных случаях — проверяем целостностность контактов на плате.5 3

![Распиновка Arduino Uno](raspinovka-arduino-uno.webp)

Если скетч не загружается и Arduino IDE выдает ошибку «avrdude: stk500_getsync(): not in sync: resp=0x00»:

Убедитесь в том, что в настройках Arduino IDE вы выбрали правильный тип платы и правильный COM порт.

Пару раз нажмите кнопку сброса на Ардуино и попробуйте после этого загрузить в нее код программы.

Отключите и заново подсоедините плату к компьютеру.

Закройте и снова запустите Arduino IDE.

Если выполненные действия не помогли — попробуйте прошить плату.

[Здесь](https://arduino-info.ru/proshivka-platy-arduino-cherez-druguyu-arduino/) мы рассказывали о том, как это сделать с помощью другой платы Ардуино. 

### [Модульные тесты для проектов Ардуино](https://habr.com/ru/articles/419445/)

Модульные тесты (unit tests, юнит-тесты) облегчают жизнь при поиске проблемных мест приложения, предотвращают повторение уже найденных проблем (регрессий), дают измеримую уверенность в надежности написанного кода. Это тем более важно при разработке встраиваемых приложений и всевозможных мобильных роботов, для которых процесс отладки, отлова и воспроизведения (особенно, воспроизведения) ошибок особенно затруднителен по сравнению с классическими настольными, серверными или мобильными приложениями.


Однако переход к использованию автоматических тестов в проекте требует специальной внутренней дисциплины, особого подхода к написанию кода и организации рабочего пространства проекта.


При подготовке к внедрению в проект модульных тестов следует иметь ввиду:


Тесты требуют дополнительного времени для написания кода (на самом деле, нет: время, потраченное на автоматические тесты, вполне сравнимо со временем, потраченным на ручную отладку того же участка, а на долгой дистанции оно еще многократно окупится), при этом код теста может превышать по размеру код тестируемого участка.
В покрытом тестами проекте может быть сложно проводить глобальную реорганизацию кода (рефакторинг) — особенно актуально на начальном этапе разработки, когда кодовая база и внутренний API еще не достаточно устаканились (с другой стороны, рефактор проекта, не покрытого тестами, повлечет все те же регрессии, просто вы про них не узнаете)
Нужно писать модули приложения так, чтобы их можно было запускать как в рамках приложения, так и внутри отдельных тестов
Необходимо проработать структуру и связи внутри проекта так, чтобы в нем нашлось место коду основного приложения, исполняемой прошивке основного приложения, коду тестов, исполняемой прошивке («запускальщик»/ланчер) для запуска тестов.

Я более не буду распространяться про философию модульного тестирования, а просто покажу, как технически внедрить простые модульные тесты в ваш проект на Ардуино.


Далее рассмотрим:


Несколько стратегий организации рабочего пространства проекта с модульными тестами с учетом особенностей платформы Ардуино.
Вариант «все в одном» (и код и тесты в одном файле скетча),
вынесение тестов в отдельный модуль в каталоге скетча,
вынесение тестов в отдельный проект.
Запуск тестов на устройстве,
запуск этих же тестов на настольном компьютере без загрузки на устройство, заглушки для API Ардуино.



